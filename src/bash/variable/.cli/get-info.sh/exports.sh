cli::source cli bash type get-info
cli::source cli bash variable declaration get-info
cli::bash::variable::get_info () 
{ 
    declare -gA CLI_BASH_VARIABLE_INFO_CACHE+=();
    REPLY_CLI_BASH_VARIABLE_IS_CACHE_HIT=false;
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER=false;
    REPLY_CLI_BASH_VARIABLE_IS_STRING=false;
    REPLY_CLI_BASH_VARIABLE_IS_SCALER=false;
    REPLY_CLI_BASH_VARIABLE_IS_ARRAY=false;
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER_ARRAY=false;
    REPLY_CLI_BASH_VARIABLE_IS_MAP=false;
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER_MAP=false;
    REPLY_CLI_BASH_VARIABLE_IS_READONLY=false;
    REPLY_CLI_BASH_VARIABLE_IS_EXPORTED=false;
    REPLY_CLI_BASH_VARIABLE_IS_UPPER=false;
    REPLY_CLI_BASH_VARIABLE_IS_LOWER=false;
    REPLY_CLI_BASH_VARIABLE_IS_UNINITIALIZED=false;
    local NAME="${1-}";
    [[ -n ${NAME} ]] || cli::assert 'Missing variable name.';
    if [[ -n ${CLI_BASH_VARIABLE_INFO_CACHE["${NAME}"]+set == "set" } ]]; then
        REPLY_CLI_BASH_VARIABLE_IS_READONLY=true;
        REPLY_CLI_BASH_VARIABLE_IS_CACHE_HIT=true;
        cli::bash::type::get_info "${CLI_BASH_VARIABLE_INFO_CACHE["$1"]}";
        REPLY=${REPLY};
        REPLY_CLI_BASH_VARIABLE_IS_INTEGER=${REPLY_CLI_BASH_TYPE_IS_INTEGER};
        REPLY_CLI_BASH_VARIABLE_IS_STRING=${REPLY_CLI_BASH_TYPE_IS_STRING};
        REPLY_CLI_BASH_VARIABLE_IS_SCALER=${REPLY_CLI_BASH_TYPE_IS_SCALER};
        REPLY_CLI_BASH_VARIABLE_IS_ARRAY=${REPLY_CLI_BASH_TYPE_IS_ARRAY};
        REPLY_CLI_BASH_VARIABLE_IS_INTEGER_ARRAY=${REPLY_CLI_BASH_TYPE_IS_INTEGER_ARRAY};
        REPLY_CLI_BASH_VARIABLE_IS_MAP=${REPLY_CLI_BASH_TYPE_IS_MAP};
        REPLY_CLI_BASH_VARIABLE_IS_INTEGER_MAP=${REPLY_CLI_BASH_TYPE_IS_INTEGER_MAP};
        return;
    fi;
    local NEXT_NAME=$NAME;
    while true; do
        local DECLARE;
        DECLARE=$( declare -p ${NEXT_NAME} 2>/dev/null ) || return;
        local _ FLAGS VALUE;
        read _ FLAGS VALUE <<< "${DECLARE}";
        cli::bash::variable::declaration::get_info "${FLAGS//-/}";
        if ${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_NAMED}; then
            NEXT_NAME=$(eval "echo \${!${NEXT_NAME}}");
            continue;
        fi;
        if [[ "${VALUE}" == "${NEXT_NAME}" ]]; then
            REPLY_CLI_BASH_VARIABLE_IS_UNINITIALIZED=true;
        fi;
        break;
    done;
    if ! ${REPLY_CLI_BASH_VARIABLE_IS_UNINITIALIZED} && ${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_READONLY} && ! ${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_EXPORTED} && ! ${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_UPPER} && ! ${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_LOWER}; then
        CLI_BASH_VARIABLE_INFO_CACHE["${NAME}"]="${REPLY}";
    fi;
    REPLY=${REPLY};
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER};
    REPLY_CLI_BASH_VARIABLE_IS_STRING=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_STRING};
    REPLY_CLI_BASH_VARIABLE_IS_SCALER=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_SCALER};
    REPLY_CLI_BASH_VARIABLE_IS_ARRAY=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_ARRAY};
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER_ARRAY=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_ARRAY};
    REPLY_CLI_BASH_VARIABLE_IS_MAP=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_MAP};
    REPLY_CLI_BASH_VARIABLE_IS_INTEGER_MAP=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_MAP};
    REPLY_CLI_BASH_VARIABLE_IS_READONLY=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_READONLY};
    REPLY_CLI_BASH_VARIABLE_IS_EXPORTED=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_EXPORTED};
    REPLY_CLI_BASH_VARIABLE_IS_UPPER=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_UPPER};
    REPLY_CLI_BASH_VARIABLE_IS_LOWER=${REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_LOWER}
}
