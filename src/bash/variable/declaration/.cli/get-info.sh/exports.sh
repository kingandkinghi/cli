cli::source cli bash type get-info
cli::bash::variable::declaration::get_info () 
{ 
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_STRING=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_SCALER=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_ARRAY=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_ARRAY=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_MAP=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_MAP=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_NAMED=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_READONLY=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_EXPORTED=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_UPPER=false;
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_LOWER=false;
    local FLAGS="${1-}";
    if [[ "${FLAGS}" == *n* ]]; then
        FLAGS="${FLAGS/n/}";
        REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_NAMED=true;
    fi;
    if [[ "${FLAGS}" == *r* ]]; then
        FLAGS="${FLAGS/r/}";
        REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_READONLY=true;
    fi;
    if [[ "${FLAGS}" == *x* ]]; then
        FLAGS="${FLAGS/x/}";
        REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_EXPORTED=true;
    fi;
    if [[ "${FLAGS}" == *u* ]]; then
        FLAGS="${FLAGS/u/}";
        REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_UPPER=true;
        [[ ! "${FLAGS}" == *l* ]] || cli::assert "Type cannot be both upper and lower.";
    fi;
    if [[ "${FLAGS}" == *l* ]]; then
        FLAGS="${FLAGS/l/}";
        REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_LOWER=true;
    fi;
    cli::bash::type::get_info "${FLAGS}";
    REPLY=${REPLY};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER=${REPLY_CLI_BASH_TYPE_IS_INTEGER};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_STRING=${REPLY_CLI_BASH_TYPE_IS_STRING};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_SCALER=${REPLY_CLI_BASH_TYPE_IS_SCALER};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_ARRAY=${REPLY_CLI_BASH_TYPE_IS_ARRAY};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_ARRAY=${REPLY_CLI_BASH_TYPE_IS_INTEGER_ARRAY};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_MAP=${REPLY_CLI_BASH_TYPE_IS_MAP};
    REPLY_CLI_BASH_VARIABLE_DECLARATION_IS_INTEGER_MAP=${REPLY_CLI_BASH_TYPE_IS_INTEGER_MAP}
}
